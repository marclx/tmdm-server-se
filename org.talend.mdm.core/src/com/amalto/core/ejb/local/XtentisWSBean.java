// ============================================================================
//
// Copyright (C) 2006-2014 Talend Inc. - www.talend.com
//
// This source code is available under agreement available at
// %InstallDIR%\features\org.talend.rcp.branding.%PRODUCTNAME%\%PRODUCTNAME%license.txt
//
// You should have received a copy of the agreement
// along with this program; if not, write to Talend SA
// 9 rue Pages 92150 Suresnes, France
//
// ============================================================================
package com.amalto.core.ejb.local;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Set;

import javax.naming.InitialContext;
import javax.resource.ResourceException;
import javax.resource.cci.*;

import com.amalto.core.integrity.FKIntegrityCheckResult;
import org.jboss.security.Base64Encoder;

import sun.misc.BASE64Decoder;

import com.amalto.connector.jca.InteractionSpecImpl;
import com.amalto.connector.jca.RecordFactoryImpl;
import com.amalto.core.delegator.BeanDelegatorContainer;
import com.amalto.core.webservice.*;

/**
 * @ejb.bean name="XtentisWS" display-name="The Xtentis" description="The Xtentis WebServices"
 * jndi-name="amalto/ws/xtentis" type="Stateless" view-type="service-endpoint"
 * 
 * @jboss.port-component auth-method = "BASIC" name = "XtentisPort" uri = "/talend/TalendPort"
 * 
 * @wsee.port-component description = "The Xtentis Port" display-name ="XtentisPort" name = "XtentisPort"
 * 
 * 
 * Not generated by xdoclet:just an indication for the deployment descriptor but we use the one generated by jwsdp
 * @ejb.interface service-endpoint-class = "com.amalto.core.webservice.XtentisPort"
 *
 */
@SuppressWarnings({ "deprecation", "unchecked" })
public class XtentisWSBean implements XtentisPort {

    private transient ConnectionFactory cxFactory = null;

    public XtentisWSBean() {
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSVersion getComponentVersion(WSGetComponentVersion wsGetComponentVersion) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getComponentVersion(wsGetComponentVersion);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString ping(WSPing wsPing) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().ping(wsPing);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString logout(WSLogout logout) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().logout(logout);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSInt initMDM(WSInitData initData) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().initMDM(initData);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSMDMConfig getMDMConfiguration() throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMDMConfiguration();
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDataModel getDataModel(WSGetDataModel wsDataModelget) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDataModel(wsDataModelget);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsDataModel(WSExistsDataModel wsExistsDataModel) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsDataModel(wsExistsDataModel);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     * 
     */
    @Override
    public WSDataModelPKArray getDataModelPKs(WSRegexDataModelPKs regexp) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDataModelPKs(regexp);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDataModelPK deleteDataModel(WSDeleteDataModel wsDeleteDataModel) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteDataModel(wsDeleteDataModel);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * 
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDataModelPK putDataModel(WSPutDataModel wsDataModel) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putDataModel(wsDataModel);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * 
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString checkSchema(WSCheckSchema wsSchema) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().checkSchema(wsSchema);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * 
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString putBusinessConcept(WSPutBusinessConcept wsPutBusinessConcept) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putBusinessConcept(wsPutBusinessConcept);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * 
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString putBusinessConceptSchema(WSPutBusinessConceptSchema wsPutBusinessConceptSchema) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putBusinessConceptSchema(wsPutBusinessConceptSchema);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString deleteBusinessConcept(WSDeleteBusinessConcept wsDeleteBusinessConcept) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteBusinessConcept(wsDeleteBusinessConcept);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray getBusinessConcepts(WSGetBusinessConcepts wsGetBusinessConcepts) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getBusinessConcepts(wsGetBusinessConcepts);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSConceptKey getBusinessConceptKey(WSGetBusinessConceptKey wsGetBusinessConceptKey) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getBusinessConceptKey(wsGetBusinessConceptKey);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDataCluster getDataCluster(WSGetDataCluster wsDataClusterGet) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDataCluster(wsDataClusterGet);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsDataCluster(WSExistsDataCluster wsExistsDataCluster) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsDataCluster(wsExistsDataCluster);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsDBDataCluster(WSExistsDBDataCluster wsExistsDataCluster) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsDBDataCluster(wsExistsDataCluster);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDataClusterPKArray getDataClusterPKs(WSRegexDataClusterPKs regexp) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDataClusterPKs(regexp);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDataClusterPK deleteDataCluster(WSDeleteDataCluster wsDeleteDataCluster) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteDataCluster(wsDeleteDataCluster);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDataClusterPK putDataCluster(WSPutDataCluster wsDataCluster) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putDataCluster(wsDataCluster);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean putDBDataCluster(WSPutDBDataCluster wsDataCluster) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putDBDataCluster(wsDataCluster);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray getConceptsInDataCluster(WSGetConceptsInDataCluster wsGetConceptsInDataCluster) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getConceptsInDataCluster(wsGetConceptsInDataCluster);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSConceptRevisionMap getConceptsInDataClusterWithRevisions(
            WSGetConceptsInDataClusterWithRevisions wsGetConceptsInDataClusterWithRevisions) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .getConceptsInDataClusterWithRevisions(wsGetConceptsInDataClusterWithRevisions);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSView getView(WSGetView wsViewGet) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getView(wsViewGet);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsView(WSExistsView wsExistsView) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsView(wsExistsView);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSViewPKArray getViewPKs(WSGetViewPKs regexp) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getViewPKs(regexp);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSViewPK deleteView(WSDeleteView wsDeleteView) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteView(wsDeleteView);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSViewPK putView(WSPutView wsView) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putView(wsView);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray viewSearch(WSViewSearch wsViewSearch) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().viewSearch(wsViewSearch);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray xPathsSearch(WSXPathsSearch wsXPathsSearch) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().xPathsSearch(wsXPathsSearch);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray getItemsPivotIndex(WSGetItemsPivotIndex wsGetItemsPivotIndex) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItemsPivotIndex(wsGetItemsPivotIndex);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray getChildrenItems(WSGetChildrenItems wsGetChildrenItems) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getChildrenItems(wsGetChildrenItems);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString count(WSCount wsCount) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().count(wsCount);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray getItems(WSGetItems wsGetItems) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItems(wsGetItems);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray getItemsSort(WSGetItemsSort wsGetItemsSort) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItemsSort(wsGetItemsSort);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPKsByCriteriaResponse getItemPKsByCriteria(WSGetItemPKsByCriteria wsGetItemPKsByCriteria) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItemPKsByCriteria(wsGetItemPKsByCriteria);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPKsByCriteriaResponse getItemPKsByFullCriteria(WSGetItemPKsByFullCriteria wsGetItemPKsByFullCriteria)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItemPKsByFullCriteria(wsGetItemPKsByFullCriteria);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItem getItem(WSGetItem wsGetItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getItem(wsGetItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsItem(WSExistsItem wsExistsItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsItem(wsExistsItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray quickSearch(WSQuickSearch wsQuickSearch) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().quickSearch(wsQuickSearch);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString getBusinessConceptValue(WSGetBusinessConceptValue wsGetBusinessConceptValue) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getBusinessConceptValue(wsGetBusinessConceptValue);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray getFullPathValues(WSGetFullPathValues wsGetFullPathValues) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getFullPathValues(wsGetFullPathValues);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPK putItem(WSPutItem wsPutItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItem(wsPutItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPKArray putItemArray(WSPutItemArray wsPutItemArray) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItemArray(wsPutItemArray);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPKArray putItemWithReportArray(com.amalto.core.webservice.WSPutItemWithReportArray wsPutItemWithReportArray)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItemWithReportArray(wsPutItemWithReportArray);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPK putItemWithReport(com.amalto.core.webservice.WSPutItemWithReport wsPutItemWithReport) throws RemoteException {

        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItemWithReport(wsPutItemWithReport);

    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPK putItemWithCustomReport(com.amalto.core.webservice.WSPutItemWithCustomReport wsPutItemWithCustomReport)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putItemWithCustomReport(wsPutItemWithCustomReport);

    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSPipeline extractUsingTransformer(WSExtractUsingTransformer wsExtractUsingTransformer) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().extractUsingTransformer(wsExtractUsingTransformer);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSPipeline extractUsingTransformerThruView(WSExtractUsingTransformerThruView wsExtractUsingTransformerThruView)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .extractUsingTransformerThruView(wsExtractUsingTransformerThruView);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPK deleteItem(WSDeleteItem wsDeleteItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteItem(wsDeleteItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString deleteItemWithReport(WSDeleteItemWithReport wsDeleteItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteItemWithReport(wsDeleteItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSInt deleteItems(WSDeleteItems wsDeleteItems) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteItems(wsDeleteItems);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDroppedItemPK dropItem(WSDropItem wsDropItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().dropItem(wsDropItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray runQuery(WSRunQuery wsRunQuery) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().runQuery(wsRunQuery);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSServiceGetDocument getServiceDocument(WSString serviceName) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getServiceDocument(serviceName);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString getServiceConfiguration(WSServiceGetConfiguration wsGetConfiguration) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getServiceConfiguration(wsGetConfiguration);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSCheckServiceConfigResponse checkServiceConfiguration(WSCheckServiceConfigRequest serviceName) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().checkServiceConfiguration(serviceName);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString putServiceConfiguration(WSServicePutConfiguration wsPutConfiguration) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putServiceConfiguration(wsPutConfiguration);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString serviceAction(WSServiceAction wsServiceAction) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().serviceAction(wsServiceAction);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSServicesList getServicesList(WSGetServicesList wsGetServicesList) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getServicesList(wsGetServicesList);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    public WSString ping() throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().ping();
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSConnectorInteractionResponse connectorInteraction(WSConnectorInteraction wsConnectorInteraction)
            throws RemoteException {
        WSConnectorInteractionResponse response = new WSConnectorInteractionResponse();
        Connection connection = null;
        try {
            String JNDIName = wsConnectorInteraction.getJNDIName();
            connection = getConnection(JNDIName);
            Interaction interaction = connection.createInteraction();
            InteractionSpecImpl interactionSpec = new InteractionSpecImpl();
            RecordFactory recordFactory = new RecordFactoryImpl();
            MappedRecord recordIn = recordFactory.createMappedRecord(RecordFactoryImpl.RECORD_IN);
            WSConnectorFunction cf = wsConnectorInteraction.getFunction();
            if ((WSConnectorFunction.GET_STATUS).equals(cf)) {
                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_GET_STATUS);
            } else if ((WSConnectorFunction.PULL).equals(cf)) {
                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_PULL);
            } else if ((WSConnectorFunction.PUSH).equals(cf)) {
                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_PUSH);
            } else if ((WSConnectorFunction.START).equals(cf)) {
                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_START);
            } else if ((WSConnectorFunction.STOP).equals(cf)) {
                interactionSpec.setFunctionName(InteractionSpecImpl.FUNCTION_STOP);
            }
            recordIn.put(RecordFactoryImpl.PARAMS_HASHMAP_IN, getMapFromKeyValues(wsConnectorInteraction.getParameters()));
            MappedRecord recordOut = (MappedRecord) interaction.execute(interactionSpec, recordIn);
            String code = (String) recordOut.get(RecordFactoryImpl.STATUS_CODE_OUT);
            HashMap<?, ?> map = (HashMap<?, ?>) recordOut.get(RecordFactoryImpl.PARAMS_HASHMAP_OUT);
            if ("OK".equals(code)) { //$NON-NLS-1$
                response.setCode(WSConnectorResponseCode.OK);
            } else if ("STOPPED".equals(code)) { //$NON-NLS-1$
                response.setCode(WSConnectorResponseCode.STOPPED);
            } else if ("ERROR".equals(code)) { //$NON-NLS-1$
                response.setCode(WSConnectorResponseCode.ERROR);
            } else {
                throw new RemoteException("Unknown code: " + code); //$NON-NLS-1$
            }
            response.setParameters(getKeyValuesFromMap(map));
        } catch (ResourceException e) {
            throw new RemoteException(e.getLocalizedMessage());
        } catch (Exception e) {
            throw new RemoteException(e.getClass().getName() + ": " + e.getLocalizedMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (Exception cx) {
                org.apache.log4j.Category.getInstance(this.getClass()).debug(
                        "connectorInteraction() Connection close exception: " + cx.getLocalizedMessage());
            }
        }
        return response;

    }

    private Connection getConnection(String JNDIName) throws RemoteException {
        try {
            if (cxFactory == null) {
                cxFactory = (ConnectionFactory) (new InitialContext()).lookup(JNDIName);
            }
            return cxFactory.getConnection();
        } catch (Exception e) {
            throw new RemoteException(e.getClass().getName() + ": " + e.getLocalizedMessage());
        }
    }

    private HashMap getMapFromKeyValues(WSBase64KeyValue[] params) throws RemoteException {
        try {
            HashMap map = new HashMap();
            if (params != null) {
                for (WSBase64KeyValue param : params) {
                    if (param != null) {
                        String key = param.getKey();
                        byte[] bytes = (new BASE64Decoder()).decodeBuffer(param.getBase64StringValue());
                        if (bytes != null) {
                            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                            ObjectInputStream ois = new ObjectInputStream(bais);
                            map.put(key, ois.readObject());
                        } else {
                            map.put(key, null);
                        }
                    }
                }
            }
            return map;
        } catch (Exception e) {
            throw new RemoteException(e.getClass().getName() + ": " + e.getLocalizedMessage());
        }
    }

    private WSBase64KeyValue[] getKeyValuesFromMap(HashMap params) throws RemoteException {
        try {
            if (params == null) {
                return null;
            }
            WSBase64KeyValue[] keyValues = new WSBase64KeyValue[params.size()];
            Set keys = params.keySet();
            int i = 0;
            for (Object currentKeyObject : keys) {
                String key = (String) currentKeyObject;
                Object value = params.get(key);
                if (value != null) {
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    ObjectOutputStream oos = new ObjectOutputStream(baos);
                    oos.writeObject(value);
                    String base64Value = Base64Encoder.encode(baos.toByteArray());
                    keyValues[i] = new WSBase64KeyValue();
                    keyValues[i].setKey(key);
                    keyValues[i].setBase64StringValue(base64Value);
                    i++;
                }
            }
            return keyValues;
        } catch (Exception e) {
            throw new RemoteException(e.getClass().getName() + ": " + e.getLocalizedMessage());
        }
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStoredProcedurePK deleteStoredProcedure(WSDeleteStoredProcedure wsStoredProcedureDelete) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteStoredProcedure(wsStoredProcedureDelete);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray executeStoredProcedure(WSExecuteStoredProcedure wsExecuteStoredProcedure) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().executeStoredProcedure(wsExecuteStoredProcedure);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStoredProcedure getStoredProcedure(WSGetStoredProcedure wsGetStoredProcedure) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getStoredProcedure(wsGetStoredProcedure);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsStoredProcedure(WSExistsStoredProcedure wsExistsStoredProcedure) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsStoredProcedure(wsExistsStoredProcedure);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStoredProcedurePKArray getStoredProcedurePKs(WSRegexStoredProcedure regex) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getStoredProcedurePKs(regex);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStoredProcedurePK putStoredProcedure(WSPutStoredProcedure wsStoredProcedure) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putStoredProcedure(wsStoredProcedure);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSMenuPK deleteMenu(WSDeleteMenu wsMenuDelete) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteMenu(wsMenuDelete);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSMenu getMenu(WSGetMenu wsGetMenu) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMenu(wsGetMenu);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsMenu(WSExistsMenu wsExistsMenu) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsMenu(wsExistsMenu);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSMenuPKArray getMenuPKs(WSGetMenuPKs regex) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMenuPKs(regex);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSMenuPK putMenu(WSPutMenu wsMenu) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putMenu(wsMenu);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBackgroundJob getBackgroundJob(WSGetBackgroundJob wsBackgroundJobGet) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getBackgroundJob(wsBackgroundJobGet);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBackgroundJobPKArray findBackgroundJobPKs(WSFindBackgroundJobPKs wsFindBackgroundJobPKs) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().findBackgroundJobPKs(wsFindBackgroundJobPKs);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    public WSBackgroundJobPK putBackgroundJob(WSPutBackgroundJob wsputjob) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putBackgroundJob(wsputjob);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSUniverse getCurrentUniverse(WSGetCurrentUniverse wsGetCurrentUniverse) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getCurrentUniverse(wsGetCurrentUniverse);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerPK deleteTransformer(WSDeleteTransformer wsTransformerDelete) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteTransformer(wsTransformerDelete);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformer getTransformer(WSGetTransformer wsGetTransformer) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getTransformer(wsGetTransformer);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsTransformer(WSExistsTransformer wsExistsTransformer) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsTransformer(wsExistsTransformer);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerPKArray getTransformerPKs(WSGetTransformerPKs regex) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getTransformerPKs(regex);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerPK putTransformer(WSPutTransformer wsTransformer) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putTransformer(wsTransformer);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSPipeline processBytesUsingTransformer(WSProcessBytesUsingTransformer wsProjectBytes) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().processBytesUsingTransformer(wsProjectBytes);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSPipeline processFileUsingTransformer(WSProcessFileUsingTransformer wsProcessFile) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().processFileUsingTransformer(wsProcessFile);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBackgroundJobPK processBytesUsingTransformerAsBackgroundJob(
            WSProcessBytesUsingTransformerAsBackgroundJob wsProcessBytesUsingTransformerAsBackgroundJob) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .processBytesUsingTransformerAsBackgroundJob(wsProcessBytesUsingTransformerAsBackgroundJob);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBackgroundJobPK processFileUsingTransformerAsBackgroundJob(
            WSProcessFileUsingTransformerAsBackgroundJob wsProcessFileUsingTransformerAsBackgroundJob) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .processFileUsingTransformerAsBackgroundJob(wsProcessFileUsingTransformerAsBackgroundJob);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDroppedItemPKArray findAllDroppedItemsPKs(WSFindAllDroppedItemsPKs regex) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().findAllDroppedItemsPKs(regex);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDroppedItem loadDroppedItem(WSLoadDroppedItem wsLoadDroppedItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().loadDroppedItem(wsLoadDroppedItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPK recoverDroppedItem(WSRecoverDroppedItem wsRecoverDroppedItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().recoverDroppedItem(wsRecoverDroppedItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDroppedItemPK removeDroppedItem(WSRemoveDroppedItem wsRemoveDroppedItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().removeDroppedItem(wsRemoveDroppedItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingRule getRoutingRule(WSGetRoutingRule wsRoutingRuleGet) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getRoutingRule(wsRoutingRuleGet);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsRoutingRule(WSExistsRoutingRule wsExistsRoutingRule) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsRoutingRule(wsExistsRoutingRule);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingRulePK deleteRoutingRule(WSDeleteRoutingRule wsDeleteRoutingRule) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteRoutingRule(wsDeleteRoutingRule);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingRulePK putRoutingRule(WSPutRoutingRule wsRoutingRule) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putRoutingRule(wsRoutingRule);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingRulePKArray getRoutingRulePKs(WSGetRoutingRulePKs regex) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getRoutingRulePKs(regex);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerV2PK deleteTransformerV2(WSDeleteTransformerV2 wsTransformerV2Delete) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteTransformerV2(wsTransformerV2Delete);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerV2 getTransformerV2(WSGetTransformerV2 wsGetTransformerV2) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getTransformerV2(wsGetTransformerV2);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsTransformerV2(WSExistsTransformerV2 wsExistsTransformerV2) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsTransformerV2(wsExistsTransformerV2);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerV2PKArray getTransformerV2PKs(WSGetTransformerV2PKs regex) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getTransformerV2PKs(regex);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerV2PK putTransformerV2(WSPutTransformerV2 wsTransformerV2) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putTransformerV2(wsTransformerV2);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerContext executeTransformerV2(WSExecuteTransformerV2 wsExecuteTransformerV2) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().executeTransformerV2(wsExecuteTransformerV2);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBackgroundJobPK executeTransformerV2AsJob(WSExecuteTransformerV2AsJob wsExecuteTransformerV2AsJob)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .executeTransformerV2AsJob(wsExecuteTransformerV2AsJob);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerContext extractThroughTransformerV2(WSExtractThroughTransformerV2 wsExtractThroughTransformerV2)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .extractThroughTransformerV2(wsExtractThroughTransformerV2);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean existsTransformerPluginV2(WSExistsTransformerPluginV2 wsExistsTransformerPlugin) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsTransformerPluginV2(wsExistsTransformerPlugin);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString getTransformerPluginV2Configuration(WSTransformerPluginV2GetConfiguration wsGetConfiguration)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .getTransformerPluginV2Configuration(wsGetConfiguration);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString putTransformerPluginV2Configuration(WSTransformerPluginV2PutConfiguration wsPutConfiguration)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .putTransformerPluginV2Configuration(wsPutConfiguration);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerPluginV2Details getTransformerPluginV2Details(
            WSGetTransformerPluginV2Details wsGetTransformerPluginDetails) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .getTransformerPluginV2Details(wsGetTransformerPluginDetails);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSTransformerPluginV2SList getTransformerPluginV2SList(WSGetTransformerPluginV2SList wsGetTransformerPluginsList)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .getTransformerPluginV2SList(wsGetTransformerPluginsList);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingOrderV2 getRoutingOrderV2(WSGetRoutingOrderV2 wsGetRoutingOrder) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getRoutingOrderV2(wsGetRoutingOrder);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingOrderV2 existsRoutingOrderV2(WSExistsRoutingOrderV2 wsExistsRoutingOrder) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().existsRoutingOrderV2(wsExistsRoutingOrder);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingOrderV2PK deleteRoutingOrderV2(WSDeleteRoutingOrderV2 wsDeleteRoutingOrder) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteRoutingOrderV2(wsDeleteRoutingOrder);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingOrderV2PK executeRoutingOrderV2Asynchronously(
            WSExecuteRoutingOrderV2Asynchronously wsExecuteRoutingOrderAsynchronously) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .executeRoutingOrderV2Asynchronously(wsExecuteRoutingOrderAsynchronously);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString executeRoutingOrderV2Synchronously(WSExecuteRoutingOrderV2Synchronously wsExecuteRoutingOrderSynchronously)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .executeRoutingOrderV2Synchronously(wsExecuteRoutingOrderSynchronously);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingOrderV2PKArray getRoutingOrderV2PKsByCriteria(
            WSGetRoutingOrderV2PKsByCriteria wsGetRoutingOrderV2PKsByCriteria) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .getRoutingOrderV2PKsByCriteria(wsGetRoutingOrderV2PKsByCriteria);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingOrderV2Array getRoutingOrderV2SByCriteria(WSGetRoutingOrderV2SByCriteria wsGetRoutingOrderV2SByCriteria)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .getRoutingOrderV2SByCriteria(wsGetRoutingOrderV2SByCriteria);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingRulePKArray routeItemV2(WSRouteItemV2 wsRouteItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().routeItemV2(wsRouteItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingEngineV2Status routingEngineV2Action(WSRoutingEngineV2Action wsRoutingEngineAction) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().routingEngineV2Action(wsRoutingEngineAction);

    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSCategoryData getMDMCategory(WSCategoryData request) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMDMCategory(request);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean putMDMJob(WSPUTMDMJob job) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().putMDMJob(job);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean deleteMDMJob(WSDELMDMJob job) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().deleteMDMJob(job);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSMDMJobArray getMDMJob(WSMDMNULL job) {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getMDMJob(job);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSAutoIncrement getAutoIncrement(WSAutoIncrement wsAutoIncrementRequest) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getAutoIncrement(wsAutoIncrementRequest);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean isItemModifiedByOther(WSIsItemModifiedByOther wsItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().isItemModifiedByOther(wsItem.getWsItem());
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString countItemsByCustomFKFilters(WSCountItemsByCustomFKFilters wsCountItemsByCustomFKFilters)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .countItemsByCustomFKFilters(wsCountItemsByCustomFKFilters);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSStringArray getItemsByCustomFKFilters(WSGetItemsByCustomFKFilters wsGetItemsByCustomFKFilters)
            throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .getItemsByCustomFKFilters(wsGetItemsByCustomFKFilters);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSString refreshCache(WSRefreshCache refreshCache) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().refreshCache(refreshCache);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSItemPK partialPutItem(WSPartialPutItem wsPartialPutItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().partialPutItem(wsPartialPutItem);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSRoutingOrderV2Array getRoutingOrderV2ByCriteriaWithPaging(
            WSGetRoutingOrderV2ByCriteriaWithPaging wsGetRoutingOrderV2ByCriteriaWithPaging) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator()
                .getRoutingOrderV2ByCriteriaWithPaging(wsGetRoutingOrderV2ByCriteriaWithPaging);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSBoolean isXmlDB() throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().isXmlDB();
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSDigest getDigest(WSDigestKey wsDigestKey) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getDigest(wsDigestKey);
    }

    /**
     * @ejb.interface-method view-type = "service-endpoint"
     * @ejb.permission role-name = "authenticated" view-type = "service-endpoint"
     */
    @Override
    public WSLong updateDigest(WSDigest wsDigest) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().updateDigest(wsDigest);
    }

    @Override
    public WSRole getRole(WSGetRole wsGetRole) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getRole(wsGetRole);
    }

    @Override
    public WSBoolean isPagingAccurate(WSInt wsInt) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().isPagingAccurate(wsInt);
    }

    @Override
    public WSBoolean supportStaging(WSDataClusterPK dataClusterPK) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().supportStaging(dataClusterPK);
    }

    @Override
    public WSUniversePKArray getUniversePKs(WSGetUniversePKs wsGetUniversePKs) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().getUniversePKs(wsGetUniversePKs);
    }

    @Override
    public FKIntegrityCheckResult checkFKIntegrity(WSDeleteItem deleteItem) throws RemoteException {
        return BeanDelegatorContainer.getInstance().getXtentisWSDelegator().checkFKIntegrity(deleteItem);
    }

    @Override
    public WSItemPK updateItemMetadata(WSUpdateMetadataItem wsUpdateMetadataItem) throws RemoteException {
        return (BeanDelegatorContainer.getInstance().getXtentisWSDelegator()).updateItemMetadata(wsUpdateMetadataItem);
    }
}
